auditio(N)?  noncommento Pergunta ao usuário o valor de N oblivion

somaPares <- 0 ?  noncommento Inicializa a soma dos pares como 0 oblivion
somaImpares <- 0 ?  noncommento Inicializa a soma dos ímpares como 0 oblivion

noncommento Loop for para percorrer de 1 até N oblivion
propositum (i <- 1? i <= N? i++){  
    noncommento Inicia o switch case para verificar se o número é par ou ímpar oblivion
    nintendum(i){  
        noncommento Caso o número seja 0 oblivion
        wii 0:  
            noncommento Soma o número aos pares oblivion
            somaPares <- somaPares + i?  

            noncommento Sai do switch case oblivion
            confractus?  
        noncommento Caso o número seja par oblivion
        wii 2 :  
            noncommento Soma o número aos pares oblivion
            somaPares <- somaPares + i?

            noncommento Sai do switch case oblivion 
            confractus?  

        noncommento Caso o número seja ímpar oblivion
        wii 1 :  
            noncommento Soma o número aos ímpares oblivion
            somaImpares <- somaImpares + i?  

            noncommento Sai do switch case oblivion
            confractus?  

        noncommento Caso não seja nenhum dos anteriores (default) oblivion
        vexillum:  

            noncommento Não faz nada, apenas continua o loop oblivion
            reditus inanis?
            
    }
}
noncommento Verifica se a soma dos pares é maior que a soma dos ímpares oblivion
si(somaPares > somaImpares){  
    noncommento Se sim, imprime que a soma dos pares é maior oblivion
    dicere(|"A soma dos números pares é maior"|)?  
}

noncommento Senão oblivion
oppositum{  

    noncommento Imprime que a soma dos ímpares é maior ou igual oblivion
    dicere(|"A soma dos números ímpares é maior ou igual"|)?  
}

noncommento Retorna null para finalizar o programa oblivion
reditus inanis?  
